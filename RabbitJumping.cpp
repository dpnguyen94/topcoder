#include <iostream>
#include <stdio.h>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <math.h>
#include <algorithm>
#include <map>
#include <set>
#include <limits.h>
#include <memory.h>

using namespace std;

#define REP(i,a,b) for (int i=(a);i<(b);i++)
#define LL long long
#define pb push_back
#define sz(a) int((a).size())
#define all(c) (c).begin(),(c).end()
#define LMAX 2000000005

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs; 

class RabbitJumping {
public:
	int getMinimum(vector <int> holes, int largeJump);
};

int check(int x, int y) {
    if (x == y) return (abs(x) % 2);
    return 2;
}

int intersect(int x, int y, int z, int t) {
    if (x <= z && z <= y) {
        return (t >= y) ? check(z, y) : check(z,t);
    }
    if (z <= x && x <= t) {
        return (t <= y) ? check(x,t) : check(x,y);
    }
    
    return -1;
}

int RabbitJumping::getMinimum(vector <int> holes, int jump) {
    if (jump % 2 == 0) return -1;
    
	int a[55], b[55];
	int n = holes.size();
	REP(i,0,n) {
        a[i] = holes[2 * i];
        b[i] = holes[2 * i + 1];
    }
    
    n /= 2;
    int le[105], ri[105], p[105];

    le[0] = -1000000005; ri[0] = a[0] - 1;
    le[1] = -1000000005; ri[1] = a[0] - 1;
    le[2*n] = b[n - 1] + 1; ri[2*n] = 2000000005;
    le[2*n+1] = b[n - 1] + 1; ri[2*n+1] = 2000000005;
    
    REP(i,2,2*n) {
        int id = i / 2;
        le[i] = b[id - 1] + 1;
        ri[i] = a[id] - 1;
    }
    
    REP(i,0,2*n+2) p[i] = i % 2;
    
    bool c[105][105];
    memset(c,0,sizeof(c));
    REP(i,0,2*n+1) {
        if (le[i] > ri[i]) continue;
        
        REP(k,i+1,2*n+2)
            if (i != k && p[i] != p[k]) {
                int t = intersect(le[i],ri[i],le[k] - jump,ri[k] - jump);

                if (t == 2 || t == p[i]) {
                    c[i][k] = 1;
                    c[k][i] = 1;
                }
            }
    }
    
    /*
    REP(i,0,2*n+2) printf("%d %d %d\n", le[i], ri[i], p[i]);

    REP(i,0,2*n+1)
        REP(k,i+1,2*n+2)
            if (c[i][k]) printf("%d %d - %d %d\n", i, p[i], k, p[k]);
    */
        
    int s, dq = 0, cq = 0;
    int qu[105], d[105];
    memset(d,0,sizeof(d));
    d[0] = 1;
    qu[0] = 0;
    while (dq <= cq) {
        s = qu[dq ++];
        
        REP(t,0,2*n+2)
            if (c[s][t] && d[t] == 0) {
                qu[++ cq] = t;
                d[t] = d[s] + 1;
            }
    }
    
    //REP(i,0,2*n+2) printf("%d ", d[i]);
    
    return d[2*n+1] - 1;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	RabbitJumping *obj;
	int answer;
	obj = new RabbitJumping();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,17,21,36,40,55,59,74};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	p2 = 5;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {187640193,187640493,187640738,187640845,564588641,564588679,564588696,564588907,605671187,605671278,605671288,605671386,755723729,755723774,755723880,755723920,795077469,795077625,795077851,795078039,945654724,945654815,945655107,945655323};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 475;
	p2 = 9;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
