#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <time.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define FOR(i,a,b) 	for (int i=(a),_b=(b);i<_b;i++)
#define REP(i,a,b) 	for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c, it) 	for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 		push_back
#define mp 		make_pair
#define sz(c) 		int((c).size())
#define all(c) 		(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef vector<int> 	vi;
typedef vector<vi> 	vvi;
typedef vector<string> 	vs;
typedef pair<int, int> 	pi;
typedef pair<pi, int> 	pii;

const int M = 1000007;

int f[31][31][31][450];

class ABC {
public:
	string trace(int i, int j, int t, int k) {
		if (i + j + t == 0) return "";
		if (i >= 1 && f[i - 1][j][t][k] > 0) return trace(i - 1,j,t,k) + 'A';
		if (j >= 1 && k - i >= 0 && f[i][j - 1][t][k - i] > 0) return trace(i,j - 1,t,k - i) + 'B';
		if (t >= 1 && k - i - j >= 0 && f[i][j][t - 1][k - i - j] > 0) return trace(i,j,t - 1,k - i - j) + 'C';
	}

	string createString(int N, int K) {
		f[0][0][0][0] = 1;
		for (int i = 0; i <= N; i ++)
			for (int j = 0; j <= N; j ++)
				for (int t = 0; t <= N; t ++)
					for (int k = 0; k <= N * (N - 1) / 2; k ++) {
						if (i >= 1) f[i][j][t][k] = f[i - 1][j][t][k];
						if (j >= 1 && k - i >= 0) f[i][j][t][k] = (f[i][j][t][k] + f[i][j - 1][t][k - i]) % M;
						if (t >= 1 && k - i - j >= 0) f[i][j][t][k] = (f[i][j][t][k] + f[i][j][t - 1][k - i - j]) % M;
					}
					
		for (int i = 0; i <= N; i ++)
			for (int j = 0; j <= N; j ++)
				for (int t = 0; t <= N; t ++) 
					if (i + j + t == N && f[i][j][t][K] != 0)
						return trace(i,j,t,K);
						
		return "";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ABC *obj;
	string answer;
	obj = new ABC();
	clock_t startTime = clock();
	answer = obj->createString(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 3;
	p2 = "ABC";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 0;
	p2 = "CBA";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 10;
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 36;
	p2 = "CABBACCBAABCBBB";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
