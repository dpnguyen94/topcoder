#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;
typedef vector< vector<bool> > vvb;

class CutTheNumbers {
public:
	int maximumSum(vector <string> board);
};

int n, res, a[4][4];
vvb x;

void attempt(vvb x, int cnt, int total) {
	if (cnt < 0) {
		total = max(total,res);
		return;
	}
	
	int num, last;
	REP(i,0,n)
		REP(k,0,n) if (x[i][k]) {
			num = 0;
			REP(t,k,n) {
				if (!x[i][t]) {
					last = t;
					break;
				}
				
				x[i][t] = 0;
				num = num * 10 + a[i][t];
				
				attempt(x,cnt - (k - t + 1),total + num);
			}
			REP(t,k,last) x[i][t] = 1;
		}
	
	REP(i,0,n)
		REP(k,0,n) if (x[k][i]) {
			num = 0;
			REP(t,k,n) {
				if (!x[t][i]) {
					last = t;
					break;
				}
				
				x[t][i] = 0;
				num = num * 10 + a[t][i];
				
				attempt(x,cnt - (t - k + 1),total + num);
			}
			REP(t,k,last) x[t][i] = 1;
		}
}

int CutTheNumbers::maximumSum(vector <string> b) {	
	n = sz(b);
	REP(i,0,n) 
		REP(k,0,n) a[i][k] = b[i][k] - '0';
		
	x.resize(n);
	REP(i,0,n) x[i].resize(n);
	REP(i,0,n) 
		REP(k,0,n) x[i][k] = 1;
	
	res = 0;
	attempt(x,n * n,0);

	return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CutTheNumbers *obj;
	int answer;
	obj = new CutTheNumbers();
	clock_t startTime = clock();
	answer = obj->maximumSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"123","312"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 435;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"99","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 182;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"001","010","111","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1131;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"8"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
