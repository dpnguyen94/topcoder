#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <time.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define FOR(i,a,b) 	for (int i=(a),_b=(b);i<_b;i++)
#define REP(i,a,b) 	for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c, it) 	for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 		push_back
#define mp 		make_pair
#define sz(c) 		int((c).size())
#define all(c) 		(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef vector<int> 	vi;
typedef vector<vi> 	vvi;
typedef vector<string> 	vs;
typedef pair<int, int> 	pi;
typedef pair<pi, int> 	pii;


int dx[] = {0,0,-1,1};
int dy[] = {-1,1,0,0};
bool d[51][51][3001];
char tr[51][51][3001];


class StepsConstruct {
public:
	string construct(vector <string> a, int k) {
		queue<pii> Q;
		memset(d,false,sizeof(d));
		if (a[0][0] == '.') Q.push(mp(mp(0,0),0));
		while (!Q.empty()) {
			pii p = Q.front();
			Q.pop();
			int x = p.first.first, y = p.first.second, t = p.second;
			FOR(i,0,4) {
				int n_x = x + dx[i], n_y = y + dy[i], n_t = t + 1;
				if (n_x < 0 || n_x >= sz(a) || n_y < 0 || n_y >= a[0].length() || a[n_x][n_y] == '#'
					|| n_t > k || d[n_x][n_y][n_t]) continue;
				
				d[n_x][n_y][n_t] = true;
				switch(i) {
					case 0: tr[n_x][n_y][n_t] = 'L'; break;
					case 1: tr[n_x][n_y][n_t] = 'R'; break;
					case 2: tr[n_x][n_y][n_t] = 'U'; break;
					case 3: tr[n_x][n_y][n_t] = 'D'; break;
				}
				Q.push(mp(mp(n_x,n_y),n_t));
				
			}
			
		}
		
		int n = sz(a), m = a[0].length();
		if (d[n - 1][m - 1][k]) {
			int n_x = n - 1, n_y = m - 1, n_k = k;
			string res;
			while (n_k > 0) {
				res = tr[n_x][n_y][n_k] + res;
				switch(tr[n_x][n_y][n_k]) {
					case 'L': n_x = n_x - dx[0], n_y = n_y - dy[0]; break;
					case 'R': n_x = n_x - dx[1], n_y = n_y - dy[1]; break;
					case 'U': n_x = n_x - dx[2], n_y = n_y - dy[2]; break;
					case 'D': n_x = n_x - dx[3], n_y = n_y - dy[3]; break;
				}
				n_k --;
				
			}
		
			return res;
		}
		
		return "";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	StepsConstruct *obj;
	string answer;
	obj = new StepsConstruct();
	clock_t startTime = clock();
	answer = obj->construct(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"...",".#.","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = "DDRR";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...",".#.","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = "DDRRUULLDDRR";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...#.","..#..",".#..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"..#","#.#","..#",".#.","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = "";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".#...",".#.#.",".#.#.",".#.#.","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	p2 = "DDDDRRUUUURRDDDD";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"#.",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = "";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
