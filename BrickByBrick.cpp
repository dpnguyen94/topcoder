#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;

class BrickByBrick {
public:
	int timeToClear(vector <string> s);
};

char a[20][20];
int offx[] = {-1,0,1,0}, offy[] = {0,1,0,-1}, f[4][4];

int BrickByBrick::timeToClear(vector <string> s) {
	int n = sz(s), m = s[0].length(), numBricks = 0;
	FOR(i,0,n + 1)
		FOR(k,0,m + 1) if (i == 0 || i == n + 1 || k == 0 || k == m + 1) a[i][k] = '#';
		else {
			a[i][k] = s[i - 1][k - 1];
			if (a[i][k] == 'B') numBricks ++;
		}
	
	f[0][1] = 2, f[1][2] = 3, f[2][3] = 0, f[3][0] = 1;
	f[0][3] = 2, f[3][2] = 1, f[2][1] = 0, f[1][0] = 3;
	int row = 1, col = 1, pos = 0, next = 1, x, y, save, res, cnt = 0;
	FOR(t,1,1000000) {
		x = row + offx[next], y = col + offy[next];
		if (a[x][y] == '#' || a[x][y] == 'B') {
			save = next;
			next = f[pos][next];
			pos = save;
			
			if (a[x][y] == 'B') {
				res = t;
				cnt ++;
				a[x][y] = '.';
			}
		} 
		else {
			row = x, col = y;
			save = next;
			next = f[pos][next];
			pos = (save + 2) % 4;
		}
	}
	
	if (cnt < numBricks) return -1;
	return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BrickByBrick *obj;
	int answer;
	obj = new BrickByBrick();
	clock_t startTime = clock();
	answer = obj->timeToClear(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".B","BB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".BB","BBB","BBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"......B","###.###","B.....B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 35;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"..BBB...",".#BB..#.","B.#B.B..","B.B.....","##.B.B#.","#BB.#.B.","B..B.BB.","#..BB..B",".B....#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".BB..BBB.B...","B.B...B..BB..","#B...B#B.....","B#B.B##...##B","BB.B#.B##B.B#","B.B#.BBB.BB#B","B#BBB##.#B#B.","B#BB.BBB#BB.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3912;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".BBBBBBBBBBBBBB","##############B","BBBBBBBBBBBBBBB","B##############","BBBBBBBBBBBBBBB","##############B","BBBBBBBBBBBBBBB","B##############","BBBBBBBBBBBBBBB","##############B","BBBBBBBBBBBBBBB","B##############","BBBBBBBBBBBBBBB","##############B","BBBBBBBBBBBBBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 31753;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
