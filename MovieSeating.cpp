#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;

class MovieSeating {
public:
	long long getSeatings(int numFriends, vector <string> hall);
};

int row[55], col[55];
LL c[55][10], f[10];

LL getc(int k, int n) {
	if (k > n) return 0;
	return f[k] * c[n][k];
}

long long MovieSeating::getSeatings(int K, vector <string> a) {
	f[0] = 1;
	FOR(i,1,10) f[i] = f[i - 1] * i;
	FOR(i,0,55) c[i][0] = 1;
	FOR(i,1,50)
		FOR(k,1,8) c[i][k] = c[i - 1][k] + c[i - 1][k - 1];
	
	memset(col,0,sizeof(col));
	memset(row,0,sizeof(row));
	int cnt = 0;
	REP(i,0,sz(a)) 
		REP(k,0,a[i].length()) {
			if (a[i][k] == '.') cnt ++;
		
			row[i] += (a[i][k] == '.');
			col[k] += (a[i][k] == '.');
		}
	if (K == 1) return cnt;
	
	LL res = 0;
	REP(i,0,sz(a)) res += getc(K,row[i]);
	REP(i,0,a[0].length()) res += getc(K,col[i]);
	
	return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MovieSeating *obj;
	long long answer;
	obj = new MovieSeating();
	clock_t startTime = clock();
	answer = obj->getSeatings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	string t1[] = {".#..",".##.","...."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 34ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"..#",".##","..."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	string t1[] = {"..####..",".###.##.",".######.","#.#.#.#."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	string t1[] = {"........"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 40320ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
