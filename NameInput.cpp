#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;

const int INF = 1000000000;

class NameInput {
public:
	int countUpDownKeyPresses(vector <string> predictionSequence, vector <string> name);
};

string S, A;
int n, m, s[2505], a[2505], next[2505][62], prev[2505][62], f[2505][2505];

int trans(char c) {
	if (c >= 'a' && c <= 'z') return (c - 'a');
	if (c >= 'A' && c <= 'Z') return (c - 'A' + 26);
	return (c - '0' + 52);
}

int NameInput::countUpDownKeyPresses(vector <string> predict, vector <string> name) {
	S = "", A = "";
	REP(i,0,sz(predict)) S += predict[i];
	REP(i,0,sz(name)) A += name[i];
	
	m = S.length(), n = A.length();
	REP(i,0,m) s[i] = trans(S[i]);	
	REP(i,0,n) a[i] = trans(A[i]);

	int t;
	REP(i,0,m)
		REP(c,0,62) {
			t = -1;	
			REP(k,i,m) if (s[k] == c) {
				t = k;
				break;
			}
			if (t != -1) {
				next[i][c] = t;
				continue;
			}
			REP(k,0,i) if (s[k] == c) {
				t = k;
				break;
			}
			next[i][c] = t;
		}
		
	REP(i,0,m)
		REP(c,0,62) {
			t = -1;
			DOW(k,i,0) if (s[k] == c) {
				t = k;
				break;
			}
			if (t != -1) {
				prev[i][c] = t;
				continue;
			}
			DOW(k,m - 1,i + 1) if (s[k] == c) {
				t = k;
				break;
			}
			prev[i][c] = t;
		}
		
	REP(i,0,m) f[n][i] = 0;
	int pos, dist, best;
	DOW(i,n - 1,0)
		REP(k,0,m) {
			best = INF;
			pos = next[k][a[i]];
			if (pos != -1) {
				if (pos >= k) dist = pos - k;
				else dist = m - k + pos;
				best = min(best,dist + f[i + 1][pos]);
			}
			
			pos = prev[k][a[i]];
			if (pos != -1) {
				if (pos <= k) dist = k - pos;
				else dist = k + m - pos;
				best = min(best,dist + f[i + 1][pos]);
			}
			
			f[i][k] = best;
		}
	
	if (f[0][0] == INF) return -1;
	return f[0][0];
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NameInput *obj;
	int answer;
	obj = new NameInput();
	clock_t startTime = clock();
	answer = obj->countUpDownKeyPresses(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"Jjhon"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ","0123456789"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Joh","nAndFr","iends"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 186;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"aaaabbbab","baabbabaabba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bbaaababba","baababababbb"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"john"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"4444444444444"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"abcABC123","cbaCBA321"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aB32C2AaB3c","c32bA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 38;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
