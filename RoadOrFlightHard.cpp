#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;

const int MAXN = 400005;
const int MAXK = 45;
const LL INF = 1000000000000000000LL;

class RoadOrFlightHard {
public:
	long long minTime(int N, int roadFirst, int roadProd, int roadAdd, int roadMod, int flightFirst, int flightProd, int flightAdd, int flightMod, int K);
};

LL road[MAXN], fly[MAXN], f[2][MAXK][2];

long long RoadOrFlightHard::minTime(int n, int roadFirst, int roadProd, int roadAdd, int roadMod, int flightFirst, int flightProd, int flightAdd, int flightMod, int K) {
	road[0] = roadFirst % roadMod;
	REP(i,1,n) road[i] = (road[i - 1] * roadProd + roadAdd) % roadMod;
	fly[0] = flightFirst % flightMod;
	REP(i,1,n) fly[i] = (fly[i - 1] * flightProd + flightAdd) % flightMod;
	
	memset(f,0,sizeof(f));
	int next, prev;
	LL best;
	FOR(i,1,n) {
		next = i % 2;
		prev = 1 - next;
				
		FOR(k,0,K) {
			best = INF;
			if (best > f[prev][k][0]) best = f[prev][k][0];
			if (best > f[prev][k][1]) best = f[prev][k][1];
			f[next][k][0] = best + road[i - 1];
			
			best = INF;
			if (k > 0) {
				if (best > f[prev][k - 1][0]) best = f[prev][k - 1][0];
				if (best > f[prev][k][1]) best = f[prev][k][1];
			}
			f[next][k][1] = best + fly[i - 1];
		}
	}
	
	if (f[n % 2][K][0] < f[n % 2][K][1]) return f[n % 2][K][0];
	return f[n % 2][K][1];
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, bool hasAnswer, long long p10) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8 << "," << p9;
	cout << "]" << endl;
	RoadOrFlightHard *obj;
	long long answer;
	obj = new RoadOrFlightHard();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p10 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p10;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	int p9;
	long long p10;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 14;
	p2 = 1;
	p3 = 2;
	p4 = 10;
	p5 = 18;
	p6 = 1;
	p7 = 10;
	p8 = 17;
	p9 = 1;
	p10 = 14ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 4;
	p2 = 1;
	p3 = 2;
	p4 = 10;
	p5 = 1;
	p6 = 1;
	p7 = 10;
	p8 = 17;
	p9 = 2;
	p10 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 4;
	p2 = 1;
	p3 = 2;
	p4 = 10;
	p5 = 1;
	p6 = 1;
	p7 = 6;
	p8 = 9;
	p9 = 1;
	p10 = 12ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 85739;
	p2 = 94847;
	p3 = 93893;
	p4 = 98392;
	p5 = 92840;
	p6 = 93802;
	p7 = 93830;
	p8 = 92790;
	p9 = 3;
	p10 = 122365ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
