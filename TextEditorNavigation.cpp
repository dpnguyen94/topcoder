#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FORU(i,a,b) 	for (int i=(a),_b=(b);i<=_b;i++)
#define FORD(i,a,b) 	for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c, it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef pair<int, int> 	pii;
typedef pair<pii, int> 	piii;

class TextEditorNavigation {
public:
	int keystrokes(vector <string> source, vector <int> start, vector <int> finish);
};

queue<pii> q;
int n, m, len[55];
int d[55][55];
int offx[] = {0, 0, -1, 1}, offy[] = {-1, 1, 0, 0};


int TextEditorNavigation::keystrokes(vector <string> s, vector <int> start, vector <int> finish) {
	while (!q.empty()) q.pop();
	memset(d,-1,sizeof(d));
	
	n = sz(s), m = 0;
	REP(i,0,n) {
		len[i] = s[i].length();
		m = max(m, len[i]);
	}
	REP(i,0,n) FORU(k,1,m - len[i]) s[i] += ' ';
		
	q.push(mp(start[0], start[1]));
	d[start[0]][start[1]] = 0;
	pii p;
	while (!q.empty()) {
		p = q.front();
		q.pop();
		int x = p.first, y = p.second;
				
		int u, v;
		REP(i,0,4) {
			u = x + offx[i];
			v = y + offy[i];
			
			if (u < 0 || v < 0 || u > n - 1 || d[u][v] != -1) continue;
				
			d[u][v] = d[x][y] + 1;
			q.push(mp(u,v));
		}
		
		if (d[x][0] == -1) {
			d[x][0] = d[x][y] + 1;
			q.push(mp(x,0));
		}		

		if (d[x][len[x] - 1] == -1) {
			d[x][len[x] - 1] = d[x][y] + 1;
			q.push(mp(x,len[x] - 1));
		}
		
		if (d[0][y] == -1) {
			d[0][y] = d[x][y] + 1;
			q.push(mp(0,y));
		}
		
		if (d[n - 1][y] == -1) {
			d[n - 1][y] = d[x][y] + 1;
			q.push(mp(n - 1,y));
		}
		
		FORU(i,y,len[x] - 2) if (s[x][i] == ' ' && s[x][i + 1] != ' ') {
			if (d[x][i + 1] == -1) {
				d[x][i + 1] = d[x][y] + 1;
				q.push(mp(x,i + 1));
			}
			break;
		}
		FORD(i,y - 1,1) if (s[x][i] != ' ' && s[x][i - 1] == ' ') {
			if (d[x][i] == -1) {
				d[x][i] = d[x][y] + 1;
				q.push(mp(x,i));
			}
			break;
		}
		
		if (d[finish[0]][finish[1]] != -1) break;
	}
	
	return d[finish[0]][finish[1]];
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	TextEditorNavigation *obj;
	int answer;
	obj = new TextEditorNavigation();
	clock_t startTime = clock();
	answer = obj->keystrokes(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"AAAAA AAA AAAAAAAAAAAAA  AAAA","AA   AAAAAAAAA AAAA     AAAA","BBBBBBBBBBBBBBBBBBBBBBBBBBB","BBBBBBB BBBBBBBBBB BBBBBBB","CCC CCCC CCCCCC      CCCC","DDDDDDDDDDDDDDDDDDD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"A A A A A A A A A A A A A A A A A A A A A A A A A ","BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB","CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CC","DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD ","EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EE","FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF ","GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GG","HHHHHHHHHHH HHHHHHHHHH HHHHHHHHHH HHHHHHHHHH HHHHH","IIIIIIIIIIIIIII IIIIIIIIIIIIIII IIIIIIIIIIIIIII   ","JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJ","KKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKK","LLLLLLLLLL LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","N N N N N N N N N N N N N N N N N N N N N N N N N ","OOOOO OOOO OOO OO O O OO OOO OOOO OOOOO OOOOOO OOO","PPPPPPP PPPPPP PPPPP PPPP PPP PP P P PP PPP PPPP P","QQQQQQ QQQQQ QQQQ QQQ QQ Q Q QQ QQQ QQQQ QQQQQ QQQ","ZZZZ ZZ ZZZ ZZ ZZZZ ZZ ZZZ ZZ ZZZZ ZZ ZZZ ZZ ZZZZ ","SSS S SSS S SSS S SSS S SSS S SSS S SSS S SSS "
			"S SS","TT TT TT TT TT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {12,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,36};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"A A A A AAAAAAA A A A A A A A A A A","B BBBBB B B B B BBBBB B B B B B B B B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,22};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAAAAAAAAAAAAA A A A A A A A A A A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,15};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","N N N N N N N N N N N N N N N N N N N N N N N N N ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A "
			"A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A A A A A A ","A A A A A A A A A A A A A A A A A A A A "
			"A A A A A "," O O O O O O O O O O O O OO O O O O O O O O O O O "," P P P P P P P P P P P P P PP P P P P P P P P P P "," Q Q Q Q Q Q Q Q Q Q Q Q Q Q QQ Q Q Q Q Q Q Q Q Q "," R R R R R R R R R R R R R R R RR R R R R R R R R "," S S S S S S S S S S S S S S S S SS S S S S S S S "," T T T T T T T T T T T T T T T T T TT T T T T T T "," U U U U U U U U U U U U U U U U U U UU U U U U U "," V V V V V V V V V V V V V V V V V V V VV V V V V "," W W W W W W W W W W W W W W W W W W W W WW W W W "," X X X X X X X X X X X X X X X X X X X X X XX X X "," Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y YY Y "," Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z ZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {49,49};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {38,26};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 23;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"AAA","BB","CCC"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"AAAAA AAA AAAAAAAAAAAAA  AAAA","AA   AAAAAAAAA AAAA     AAAA","BBBBBBBBBBBBBBBBBBBBBBBBBBB","BBBBBBB BBBBBBBBBB BBBBBBB","CCC CCCC CCCCCC      CCCC","DDDDDDDDDDDDDDDDDDD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,17};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"A PC to do CAD huh  Sounds reasonable","Aurthor go out and buy us five new PCs","Dont you want to think about this for a minute","No every second counts and we want to be ahead of","the competition","       OK Greate idea Please place lOOk worth of","unmarked bills in my suitcase and Ill be on my way"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,11};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,15};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
