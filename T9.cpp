#include <stdio.h>
#include <math.h>
#include <limits.h>
#include <memory.h>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define REP(i,a,b) 		for (int i=(a),_b=(b);i<_b;i++)
#define FOR(i,a,b) 		for (int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,a,b) 		for (int i=(a),_b=(b);i>=_b;i--)
#define TR(c,it) 		for (typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define pb 				push_back
#define mp 				make_pair
#define sz(c) 			int((c).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef pair<int, int> 	ii;
typedef pair<ii, int> 	iii;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef vector<ii> 	    vii;
typedef vector<vii> 	vvii;

class T9 {
public:
	string message(vector <string> part, vector <string> dict, vector <string> keystr);
};

vs p, d;

bool inset(int num, char c) {
	if (p[num] == "") return 0;
	REP(i,0,p[num].length()) if (c == p[num][i]) return 1;
	return 0;
}

bool match(string y, string z) {
	if (y.length() != z.length()) return 0;
	
	REP(i,0,y.length()) if (!inset(y[i] - '0' - 1,z[i])) return 0;
	return 1;
}

string search(string str, int cnt) {
	string x = "", y = "";
	REP(i,0,str.length()) if (str[i] == '0') x += ' ';
	else y += str[i];
	
	int k = 0;
	REP(i,0,sz(d)) if (match(y,d[i])) {
		k ++;
		if (k == cnt + 1) return (x + d[i]);
	}
	
	return x;
}

string T9::message(vector <string> part, vector <string> dict, vector <string> keystr) {
	sort(all(dict));
	p = part, d = dict;
	string s = "";
	REP(i,0,sz(keystr)) s += keystr[i];
	
	string str = "", res = "";
	int cnt = 0;
	REP(i,0,s.length()) {
		if (s[i] == '#') cnt ++;
		else if (s[i] == '*') cnt += 5;
		else str += s[i];
		
		if (i == s.length() - 1 || (s[i] != '0' && s[i + 1] == '0') 
			|| ((s[i] == '#' || s[i] == '*') && s[i + 1] != '#' && s[i + 1] != '*')) {
			res += search(str,cnt);
			str = "";
			cnt = 0;
		}
	}
	
	return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	T9 *obj;
	string answer;
	obj = new T9();
	clock_t startTime = clock();
	answer = obj->message(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	string p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bad"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"2230223"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "bad bad";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"the","tie"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"0843#000843#000"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = " tie   tie   ";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bad","ace","aad","aae","aaf","acf","acd","the","tie"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"223#02","23*#00843#0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "aae bad  tie ";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"the","tie","bad","ace","aad","aae","aaf","acf","acd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"84300223#02","23#*"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "the  aae bad";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bad","ace","aad","aae","tie","aaf","acf","acd","the"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"223#02","23######"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "aae bad";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"","rq","lde","yoauz","cbfgn","tjkpx","wvs","ih","m"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"xktgmfmoqlmivm","hmthr","tpjgmnmaremiwm","tpjcmnmyrlmhvm","xkpnmgmzqdmhsm","wqopvvmiig","melbcbqeeg","jkxnmbmardmhwm","kpxnmcmyqlmism","wrztvsmhhf","srztssmiic","pxtgmfmyrdmhwm","vqoxswmiin","wryksvmihb","ptjfmbmoremhvm"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"00","7246779885##00000089682000007246779885##0000724677","9885#000089682000093355523350066659594239879###000"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "  wqopvvmiig      hmthr     wqopvvmiig    vqoxswmiin    hmthr    melbcbqeeg  pxtgmfmyrdmhwm   ";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
