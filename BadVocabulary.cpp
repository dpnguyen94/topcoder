#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>

#include <stdio.h>
#include <memory.h>

using namespace std;


class BadVocabulary {
public:
	int count(string badPrefix, string badSuffix, string badSubstring, vector <string> vocabulary);
};



int BadVocabulary::count(string badPrefix, string badSuffix, string badSubstring, vector <string> voc) {
	int cnt = 0;
	
	for (int i = 0; i < voc.size(); i++) {
        string s = voc[i], st;
        bool isbad = false;
        
        //condition 1;
        st = "";
        for (int j = 0; j < s.length(); j++) {
            st = st + s[j];
            if (st == badPrefix) { isbad = true; break; };
        }
        
        //condition 2;
        st = "";
        for (int j = s.length() - 1; j >= 0; j--) {
            st = s[j] + st;
            if (st == badSuffix) { isbad = true; break; };
        }
            
        //condition 3;
        for (int j = 1; j < s.length(); j++) {
            st = "";
            for (int k = j; k < s.length() - 1; k++) {
                st = st + s[k];
                if (st == badSubstring) {isbad = true; break; };
            }        
            if (isbad) break;
        }
        
        if (isbad) cnt++;
    }
    
    return cnt;
}



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, vector <string> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p3[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BadVocabulary *obj;
	int answer;
	obj = new BadVocabulary();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	vector <string> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = "bug";
	p1 = "bug";
	p2 = "bug";
	string t3[] = {"buggy","debugger","debug"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "a";
	p1 = "b";
	p2 = "c";
	string t3[] = {"a","b","tco"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "cut";
	p1 = "sore";
	p2 = "scar";
	string t3[] = {"scary","oscar"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "bar";
	p1 = "else";
	p2 = "foo";
	string t3[] = {"foofoofoo","foobar","elsewhere"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "pre";
	p1 = "s";
	p2 = "all";
	string t3[] = {"all","coders","be","prepared","for","the","challenge","phase"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
