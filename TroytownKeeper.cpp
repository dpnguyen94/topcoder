#include <iostream>
#include <stdio.h>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <map>
#include <set>
#include <numeric>
#include <math.h>
#include <limits.h>
#include <memory.h>

using namespace std;

#define REPF(i,a,b) 	for (int i=(a);i<(b);i++)
#define REPB(i,a,b) 	for (int i=(a);i>(b);i--)
#define FORU(i,a,b) 	for (int i=(a);i<=(b);i++)
#define FORD(i,a,b) 	for (int i=(a);i>=(b);i--)
#define pb 				push_back
#define mp 				make_pair
#define sz(a) 			int((a).size())
#define all(c) 			(c).begin(), (c).end()

typedef long long 		LL;
typedef unsigned long long 	ULL;
typedef vector<int> 	vi;
typedef vector<vi> 		vvi;
typedef vector<string> 	vs;
typedef pair<int, int> 	pii;
typedef pair<pii, int> 	piii;

class TroytownKeeper {
public:	
	int limeLiters(vector <string> maze);
};

vs a;
int n, m, res;
bool visit[55][55];
int cnt[55][55];
int offx[] = {0,0,-1,1};
int offy[] = {-1,1,0,0};

void dfs(int i, int k) {
	visit[i][k] = 1;
	int x, y;
	REPF(t,0,4) {
		x = i + offx[t];
		y = k + offy[t];
		
		if (x >= 0 && x < n && y >= 0 && y < m && a[x][y] == '#') cnt[x][y] ++;
	}
	    
	REPF(t,0,4) {
		x = i + offx[t];
		y = k + offy[t];
		
		if (x >= 0 && x < n && y >= 0 && y < m 
		  	&& !visit[x][y] && a[x][y] == '.') dfs(x,y);
	}
}


int TroytownKeeper::limeLiters(vector <string> maze) {
	a = maze;
	n = sz(a), m = a[0].length(), res = (n + m) * 2;
	
	REPF(i,0,n)
		REPF(k,0,m) 
			if ((i == 0 || i == n - 1 || k == 0 || k == m - 1) 
				&& a[i][k] == '.') {
					int x, y, j = 4;					
					REPF(t,0,4) {
						x = i + offx[t];
						y = k + offy[t];
						
						if (x >= 0 && x < n && y >= 0 && y < m) j --;
					}
					res -= j;
				}
					
    memset(visit,0,sizeof(visit));
	memset(cnt,0,sizeof(cnt));
	REPF(i,0,n)
		REPF(k,0,m)
			if ((i == 0 || i == n - 1 || k == 0 || k == m - 1) 
				&& !visit[i][k] && a[i][k] == '.') dfs(i,k);
	REPF(i,0,n)
		REPF(k,0,m)
			res += cnt[i][k];
			
	return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TroytownKeeper *obj;
	int answer;
	obj = new TroytownKeeper();
	clock_t startTime = clock();
	answer = obj->limeLiters(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"##..#","#.#.#","#.#.#","#####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 24;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"##","##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"######","#.....","#.####","#.#..#","#.##.#","#....#","######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 56;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"######","#.....","#..#..","#.....","######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#.#.#.#",".#.#.#.","#.#.#.#",".#.#.#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
